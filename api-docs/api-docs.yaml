openapi: 3.0.1
info:
  title: OpenAPI definition
  version: v0
servers:
- url: https://localhost:8443
  description: Generated server url
paths:
  /api/users/{username}:
    get:
      tags:
      - api-profile-controller
      summary: Get information for a specific user
      operationId: getReviews
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBasicView_UserBasicView'
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
      - api-edit-profile-controller
      summary: Modify user info
      operationId: editProfile
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "400":
          description: Invalid parameter
        "401":
          description: You don't have permission to do this!
        "404":
          description: User not found
        "200":
          description: User modified correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_UserBasicView'
        "500":
          description: Error with operation
    delete:
      tags:
      - api-admin-controller
      summary: Delete a user
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "403":
          description: Forbidden
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: User deleted
          content:
            '*/*':
              schema:
                type: object
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                type: object
  /api/users/{username}/password:
    put:
      tags:
      - api-edit-profile-controller
      summary: Change user password
      operationId: changePassword
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "200":
          description: Password changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_UserBasicView'
        "400":
          description: Invalid parameter
        "401":
          description: You don't have permission to do this!
        "404":
          description: User not found
        "500":
          description: Error with operation
  /api/users/{username}/image:
    get:
      tags:
      - api-profile-controller
      summary: Get the profile image for a specific user
      operationId: getProfileImage
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Profile image found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBasicView'
        "404":
          description: Profile image not found
          content:
            '*/*':
              schema:
                type: object
    put:
      tags:
      - api-edit-profile-controller
      summary: Upload profile image
      operationId: updateUserImage
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "400":
          description: Invalid parameter
        "401":
          description: You don't have permission to do this!
        "404":
          description: User not found
        "200":
          description: Image uploaded successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_UserBasicView'
        "500":
          description: Error with operation
  /api/books/{id}:
    get:
      tags:
      - api-book-controller
      summary: Get book info by ID
      operationId: getBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Book info correctly retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_GenreBookBasicView'
        "404":
          description: Book not found
    put:
      tags:
      - api-book-controller
      summary: Modify book
      operationId: editBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book_GenreBookBasicView'
        required: true
      responses:
        "500":
          description: Image not supported. Try different file
        "401":
          description: You don't have permission to do this!
        "200":
          description: Book modified correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_GenreBookBasicView'
        "404":
          description: Book not found
        "409":
          description: Invalid parameter
    delete:
      tags:
      - api-book-controller
      summary: Delete book
      operationId: deleteBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Book deleted correctly
        "401":
          description: You don't have permission to do this!
        "404":
          description: Book not found
  /api/books/{id}/image:
    get:
      tags:
      - api-book-controller
      summary: Get book image by ID
      operationId: getBookImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: Book image correctly retrieved
        "404":
          description: Book not found
    put:
      tags:
      - api-book-controller
      operationId: updateBookImage
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              required:
              - image
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/authors/{username}:
    put:
      tags:
      - api-admin-controller
      summary: Add or remove author role to the user
      operationId: changeAuthorRole
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "401":
          description: You don't have permission to do this
        "404":
          description: User not found
        "200":
          description: Role changed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_UserBasicView'
  /email/send:
    post:
      tags:
      - email-controller
      summary: Send an email
      operationId: sendEmail
      parameters:
      - name: to
        in: query
        required: true
        schema:
          type: string
      - name: subject
        in: query
        required: true
        schema:
          type: string
      - name: text
        in: query
        required: true
        schema:
          type: string
      responses:
        "500":
          description: Error sending email
          content:
            '*/*':
              schema:
                type: string
        "200":
          description: Email sent successfully
          content:
            '*/*':
              schema:
                type: string
  /api/users:
    get:
      tags:
      - api-search-results-page-controller
      summary: Load search results page users
      operationId: loadSearchResultsPageUsers
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: No users found
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Search results page users loaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_BasicInfo'
    post:
      tags:
      - api-sign-up-controller
      summary: Create a new user
      operationId: addUser
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        "400":
          description: Parameter missing.
        "201":
          description: User created correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_UserBasicView'
        "409":
          description: Invalid parameter
  /api/reviews:
    get:
      tags:
      - api-review-controller
      summary: Get reviews for a specific book
      operationId: getReviews_1
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: book
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "400":
          description: Invalid book ID
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Reviews found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review_BasicInfo'
        "404":
          description: Book not found
          content:
            '*/*':
              schema:
                type: object
    post:
      tags:
      - api-review-controller
      summary: Add a review for a specific book
      operationId: addReview
      parameters:
      - name: book
        in: query
        required: true
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review_ReviewBasicView'
        required: true
      responses:
        "400":
          description: Invalid book ID
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Review_ReviewBasicView'
        "201":
          description: Review added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review_ReviewBasicView'
        "404":
          description: Book not found
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Review_ReviewBasicView'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Review_ReviewBasicView'
  /api/books:
    get:
      tags:
      - api-search-results-page-controller
      summary: Load search results page books
      operationId: loadSearchResultsPageBooks
      parameters:
      - name: query
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "404":
          description: No books found
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Search results page books loaded
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_BasicInfo'
    post:
      tags:
      - api-book-controller
      summary: Create new book
      operationId: createBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book_BookBasicView'
        required: true
      responses:
        "400":
          description: Parameter missing.
        "409":
          description: Invalid parameter.
        "401":
          description: You don't have permission to do this!
        "201":
          description: User created correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_BookBasicView'
  /api/books/{id}/wanted:
    post:
      tags:
      - api-user-lists-controller
      summary: Add book to wanted list
      operationId: addWantedBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Book added to wanted list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_BasicInfo'
        "400":
          description: Invalid book ID
        "401":
          description: Unauthorized
        "404":
          description: Book not found
  /api/books/{id}/reading:
    post:
      tags:
      - api-user-lists-controller
      summary: Add book to reading list
      operationId: addReadingBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid book ID
        "401":
          description: Unauthorized
        "200":
          description: Book added to reading list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_BasicInfo'
        "404":
          description: Book not found
  /api/books/{id}/read:
    post:
      tags:
      - api-user-lists-controller
      summary: Add book to read list
      operationId: addReadBook
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid book ID
        "401":
          description: Unauthorized
        "200":
          description: Book added to read list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_BasicInfo'
        "404":
          description: Book not found
  /api/auth/refresh:
    post:
      tags:
      - api-login-controller
      summary: Refresh token
      operationId: refreshToken
      parameters:
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid token
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "200":
          description: Token refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/logout:
    post:
      tags:
      - api-login-controller
      summary: Logout
      operationId: logOut
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/auth/login:
    post:
      tags:
      - api-login-controller
      summary: Login
      operationId: login
      parameters:
      - name: accessToken
        in: cookie
        required: false
        schema:
          type: string
      - name: refreshToken
        in: cookie
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        "400":
          description: Invalid credentials
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/AuthResponse'
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
  /api/users/{username}/export:
    get:
      tags:
      - api-user-lists-controller
      summary: Export user's lists
      operationId: exportUserLists
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Lists exported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserBasicView'
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                type: object
  /api/users/{username}/books:
    get:
      tags:
      - api-user-lists-controller
      summary: Get a user's specific list
      operationId: getUserLists
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      - name: list
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: List found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_BasicInfo'
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Invalid list
          content:
            '*/*':
              schema:
                type: object
  /api/users/{username}/books/count:
    get:
      tags:
      - api-user-lists-controller
      summary: Get number of books in a user's list
      operationId: getNumberOfBooksInList
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      - name: list
        in: query
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Number of books found
          content:
            application/json:
              schema:
                type: integer
                format: int32
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Invalid list
          content:
            '*/*':
              schema:
                type: object
  /api/users/readings:
    get:
      tags:
      - api-statistics-controller
      summary: Get users that have read the most books
      operationId: getUsersTotalReadings
      responses:
        "204":
          description: No content
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Users found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_Username'
  /api/users/me:
    get:
      tags:
      - api-user-lists-controller
      summary: Get current user's info
      operationId: getUserInfo
      responses:
        "200":
          description: User logged in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User_BasicInfo'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
  /api/users/all:
    get:
      tags:
      - api-statistics-controller
      summary: Get the total number of users
      operationId: getTotalUsers
      parameters:
      - name: count
        in: query
        required: true
        schema:
          type: boolean
      responses:
        "200":
          description: Total users found
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/reviews/{reviewID}:
    get:
      tags:
      - api-review-controller
      summary: Get a review
      operationId: getReview
      parameters:
      - name: reviewID
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Review found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review_BasicInfo'
        "404":
          description: Review not found
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Invalid review ID
          content:
            '*/*':
              schema:
                type: object
    delete:
      tags:
      - api-review-controller
      summary: Delete a review
      operationId: deleteReview
      parameters:
      - name: reviewID
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "404":
          description: Review not found
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Review deleted
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Invalid review ID
          content:
            '*/*':
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
  /api/reviews/users/{username}:
    get:
      tags:
      - api-review-controller
      summary: "Get reviews by a specific user (if count = true, return the number\
        \ of reviews)"
      operationId: getReviewsByUser
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      - name: count
        in: query
        required: true
        schema:
          type: boolean
      responses:
        "200":
          description: Reviews found
          content:
            application/json:
              schema:
                type: integer
                format: int32
        "404":
          description: User not found
          content:
            '*/*':
              schema:
                type: object
  /api/reviews/users/{username}/books/{bookID}:
    get:
      tags:
      - api-review-controller
      summary: Check if a user has reviewed a specific book
      operationId: checkIfUserReviewedBook
      parameters:
      - name: username
        in: path
        required: true
        schema:
          type: string
      - name: bookID
        in: path
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "400":
          description: Invalid book ID
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Review found
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "404":
          description: User or book not found
          content:
            '*/*':
              schema:
                type: object
  /api/genres:
    get:
      tags:
      - api-statistics-controller
      summary: "Get the most read genres (if count is true, return the count of genres)"
      operationId: getMostReadGenresGeneral
      parameters:
      - name: count
        in: query
        required: true
        schema:
          type: boolean
      responses:
        "204":
          description: No content
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Most read genres found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre_BasicInfo'
  /api/genres/me:
    get:
      tags:
      - api-statistics-controller
      summary: Get the most read genres for the logged user
      operationId: getMostReadGenresUser
      responses:
        "204":
          description: No content
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Most read genres found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Genre_BasicInfo'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
  /api/genres/all:
    get:
      tags:
      - api-statistics-controller
      summary: Get the total number of genres
      operationId: getTotalGenres
      parameters:
      - name: count
        in: query
        required: true
        schema:
          type: boolean
      responses:
        "200":
          description: Total genres found
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/books/recommended:
    get:
      tags:
      - api-statistics-controller
      summary: Get recommended books for all users
      operationId: recommendedBooksGeneral
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: by
        in: query
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No content
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Bad request
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Recommended books found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_GenreBookBasicView'
  /api/books/me:
    get:
      tags:
      - api-user-lists-controller
      summary: Get current user's specific list
      operationId: getCurrentUserLists
      parameters:
      - name: list
        in: query
        required: true
        schema:
          type: string
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      responses:
        "200":
          description: List found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_BasicInfo'
        "400":
          description: Invalid list
          content:
            '*/*':
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
  /api/books/me/recommended:
    get:
      tags:
      - api-statistics-controller
      summary: Get recommended books for the logged user
      operationId: recommendedBooks
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 0
      - name: size
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 10
      - name: by
        in: query
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No content
          content:
            '*/*':
              schema:
                type: object
        "400":
          description: Bad request
          content:
            '*/*':
              schema:
                type: object
        "200":
          description: Recommended books found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_GenreBookBasicView'
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
  /api/books/all:
    get:
      tags:
      - api-statistics-controller
      summary: Get the total number of books
      operationId: getTotalBooks
      parameters:
      - name: count
        in: query
        required: true
        schema:
          type: boolean
      responses:
        "200":
          description: Total books found
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/authors:
    get:
      tags:
      - api-statistics-controller
      summary: "Get the most read authors (if count is true, return the count of authors)"
      operationId: getMostReadAuthorsGeneral
      parameters:
      - name: count
        in: query
        required: true
        schema:
          type: boolean
      responses:
        "200":
          description: Most read authors found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author_BasicInfo'
        "204":
          description: No content
          content:
            '*/*':
              schema:
                type: object
  /api/authors/me:
    get:
      tags:
      - api-statistics-controller
      summary: Get the most read authors for the logged user
      operationId: getMostReadAuthorsUser
      responses:
        "200":
          description: Most read authors found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author_BasicInfo'
        "204":
          description: No content
          content:
            '*/*':
              schema:
                type: object
        "401":
          description: Unauthorized
          content:
            '*/*':
              schema:
                type: object
  /api/authors/all:
    get:
      tags:
      - api-statistics-controller
      summary: Get the total number of authors
      operationId: getTotalAuthors
      parameters:
      - name: count
        in: query
        required: true
        schema:
          type: boolean
      responses:
        "200":
          description: Total authors found
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /api/books/{id}/lists:
    delete:
      tags:
      - api-user-lists-controller
      summary: Remove book from all lists
      operationId: removeBookFromLists
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Book removed from all lists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book_BasicInfo'
        "400":
          description: Invalid book ID
        "401":
          description: Unauthorized
        "404":
          description: Book not found
components:
  schemas:
    Book_UserBasicView:
      type: object
      properties:
        isbn:
          type: string
        id:
          type: integer
          format: int64
    User_UserBasicView:
      type: object
      properties:
        username:
          type: string
        roles:
          type: array
          items:
            type: string
        alias:
          type: string
        description:
          type: string
        profileImageString:
          type: string
        email:
          type: string
        readBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_UserBasicView'
        readingBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_UserBasicView'
        wantedBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_UserBasicView'
        role:
          type: array
          items:
            type: string
    Book_GenreBookBasicView:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        title:
          type: string
        authorString:
          type: string
        description:
          type: string
        releaseDate:
          type: string
        ISBN:
          type: string
        averageRating:
          type: number
          format: double
        genre:
          $ref: '#/components/schemas/Genre_GenreBookBasicView'
        series:
          type: string
        pageCount:
          type: integer
          format: int32
        publisher:
          type: string
        isbn:
          type: string
        id:
          type: integer
          format: int64
    Genre_GenreBookBasicView:
      type: object
      properties:
        name:
          type: string
    Book_ReviewBasicView:
      type: object
      properties:
        isbn:
          type: string
        id:
          type: integer
          format: int64
    Review_ReviewBasicView:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        title:
          type: string
        authorName:
          type: string
        rating:
          type: integer
          format: int32
        content:
          type: string
        user:
          $ref: '#/components/schemas/User_ReviewBasicView'
        id:
          type: integer
          format: int64
    User_ReviewBasicView:
      type: object
      properties:
        readBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_ReviewBasicView'
        readingBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_ReviewBasicView'
        wantedBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_ReviewBasicView'
        role:
          type: array
          items:
            type: string
    Book_BookBasicView:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        title:
          type: string
        authorString:
          type: string
        description:
          type: string
        releaseDate:
          type: string
        ISBN:
          type: string
        averageRating:
          type: number
          format: double
        series:
          type: string
        pageCount:
          type: integer
          format: int32
        publisher:
          type: string
        isbn:
          type: string
        id:
          type: integer
          format: int64
    Book_BasicInfo:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        title:
          type: string
        authorString:
          type: string
        description:
          type: string
        releaseDate:
          type: string
        ISBN:
          type: string
        averageRating:
          type: number
          format: double
        series:
          type: string
        pageCount:
          type: integer
          format: int32
        publisher:
          type: string
        isbn:
          type: string
        id:
          type: integer
          format: int64
    AuthResponse:
      type: object
      properties:
        status:
          type: string
          enum:
          - SUCCESS
          - FAILURE
        message:
          type: string
        error:
          type: string
    LoginRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    User_BasicInfo:
      type: object
      properties:
        readBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_BasicInfo'
        readingBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_BasicInfo'
        wantedBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_BasicInfo'
        role:
          type: array
          items:
            type: string
    UserBasicView_UserBasicView:
      type: object
    UserBasicView:
      type: object
    Book_Username:
      type: object
      properties:
        isbn:
          type: string
        id:
          type: integer
          format: int64
    User_Username:
      type: object
      properties:
        username:
          type: string
        readBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_Username'
        readingBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_Username'
        wantedBooks:
          type: array
          items:
            $ref: '#/components/schemas/Book_Username'
        role:
          type: array
          items:
            type: string
    Review_BasicInfo:
      type: object
      properties:
        ID:
          type: integer
          format: int64
        title:
          type: string
        authorName:
          type: string
        rating:
          type: integer
          format: int32
        content:
          type: string
        user:
          $ref: '#/components/schemas/User_BasicInfo'
        id:
          type: integer
          format: int64
    Genre_BasicInfo:
      type: object
      properties:
        name:
          type: string
    Author_BasicInfo:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
